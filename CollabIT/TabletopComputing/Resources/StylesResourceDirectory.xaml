<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Custom="http://schemas.microsoft.com/surface/2008">
    <Style TargetType="{x:Type Custom:ScatterViewItem}" x:Key="EmptyScatterViewItemStyle">
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Custom:ScatterViewItem}">
                    <Grid x:Name="LayoutRoot">
                        <ContentPresenter />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Control}" x:Key="ControlBaseStyle">
    	<Setter Property="FocusVisualStyle"	
    		Value="{x:Null}"/>
    	<Setter Property="SnapsToDevicePixels"
    		Value="False"/>
    	<Setter Property="FontFamily"
    		Value="Segoe360"/>
    	<Setter Property="FontWeight"
    		Value="Normal"/>
    	<Setter Property="FontSize"
    		Value="17"/>
    	<Setter Property="Padding"
    		Value="6,2,10,10"/>
    	<Setter Property="MinHeight"
    		Value="38"/>
    	<Setter Property="MinWidth"
    		Value="38"/>
    	<Setter Property="Margin"
    		Value="1"/>
    	<Setter Property="HorizontalContentAlignment"
    		Value="Left"/>
    	<Setter Property="VerticalContentAlignment"
    		Value="Top"/>
    	<Setter Property="BorderThickness"
    		Value="2"/>
    </Style>
    <Style
    	TargetType="{x:Type Custom:SurfaceButton}" 
    	BasedOn="{StaticResource ControlBaseStyle}">
    	<Setter Property="IsTabStop"
    		Value="False" />
    	<Setter Property="Focusable"
    		Value="True" />
    	<Setter Property="Background" >
    		<Setter.Value>
                <SolidColorBrush Color="{DynamicResource DefaultBackgroundColor}"/>
    		</Setter.Value>
    	</Setter>
    	<Setter Property="Foreground" >
    		<Setter.Value>
                <SolidColorBrush Color="{DynamicResource DefaultForegroundColor}"/>
    		</Setter.Value>
    	</Setter>
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type Custom:SurfaceButton}">
    				<ControlTemplate.Resources>
    					<Storyboard x:Key="Press">
    						<DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
    							Storyboard.TargetName="PressOverlay"
    							Storyboard.TargetProperty="(UIElement.Opacity)">
    							<SplineDoubleKeyFrame KeyTime="00:00:00.1000000"
    								Value="1" />
    						</DoubleAnimationUsingKeyFrames>
    					</Storyboard>
    					<Storyboard x:Key="Release">
    						<DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
    							Storyboard.TargetName="PressOverlay"
    							Storyboard.TargetProperty="(UIElement.Opacity)">
    							<SplineDoubleKeyFrame KeyTime="00:00:00.1500000"
    								Value="0" />
    						</DoubleAnimationUsingKeyFrames>
    					</Storyboard>
    				</ControlTemplate.Resources>
    				<Grid x:Name="Grid"
    					SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
    					<Rectangle  x:Name="ButtonBody"
    						Fill ="{TemplateBinding Background}"
    						SnapsToDevicePixels ="{TemplateBinding SnapsToDevicePixels}" Stroke="{TemplateBinding BorderBrush}"/>
    					<Rectangle  x:Name="PressOverlay"
    						Opacity="0"
    						Fill ="{DynamicResource {x:Static Custom:SurfaceColors.ButtonBackgroundPressedBrushKey}}" 							             
    						SnapsToDevicePixels ="{TemplateBinding SnapsToDevicePixels}"/>
    					<ContentPresenter  x:Name="Content"
    						Margin="{TemplateBinding Padding}"  
    						HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"		                                                                           
    						VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
    						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
    				</Grid>

    				<ControlTemplate.Triggers>
    					<Trigger Property="IsPressed"
    						Value="True">
    						<Trigger.EnterActions>
    							<BeginStoryboard Storyboard="{StaticResource Press}" />
    						</Trigger.EnterActions>
    						<Trigger.ExitActions>
    							<BeginStoryboard Storyboard="{StaticResource Release}" />
    						</Trigger.ExitActions>
    						<Setter Property="Foreground"
    							Value="{DynamicResource {x:Static Custom:SurfaceColors.ButtonForegroundPressedBrushKey}}"/>
    					</Trigger>
    					<Trigger Property="IsEnabled"
    						Value="False">
    						<Setter Property="Opacity"
    							Value="0.33"
    							TargetName="Content" />
    						<Setter Property="Opacity" TargetName="PressOverlay" Value="0.33"/>
    					</Trigger>
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    	<Setter Property="Padding" Value="10,6,10,10"/>
    	<Setter Property="BorderThickness" Value="1"/>
    	<Setter Property="BorderBrush">
    		<Setter.Value>
                <SolidColorBrush Color="{DynamicResource DefaultBrushColor}"/>
    		</Setter.Value>
    	</Setter>
    </Style>
    <Style x:Key="BodyTextBlockStyle" TargetType="{x:Type TextBlock}">
    	<Setter Property="TextWrapping" Value="NoWrap"/>
    	<Setter Property="TextTrimming" Value="None"/>
    	<Setter Property="Foreground">
    		<Setter.Value>
                <SolidColorBrush Color="{DynamicResource DefaultForegroundColor}"/>
    		</Setter.Value>
    	</Setter>
    </Style>
    <SolidColorBrush x:Key="ControlHitAreaBrush"    
    	Color="#00FFFFFF"/>
    <Style TargetType="{x:Type Custom:SurfaceToggleButton}" 		
    	BasedOn="{StaticResource ControlBaseStyle}">
    	<Setter Property="HorizontalContentAlignment" 
    		Value="Center"/>
    	<Setter Property="VerticalContentAlignment" 
    		Value="Center"/>
    	<Setter Property="Padding" 
    		Value="7"/>
    	<Setter Property="Background">
    		<Setter.Value>
                <SolidColorBrush Color="{DynamicResource DefaultBackgroundColor}"/>
    		</Setter.Value>
    	</Setter>
    	<Setter Property="Foreground">
    		<Setter.Value>
                <SolidColorBrush Color="{DynamicResource DefaultForegroundColor}"/>
    		</Setter.Value>
    	</Setter>
    	<Setter Property="BorderThickness" 
    		Value="1"/>
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type Custom:SurfaceToggleButton}">
    				<ControlTemplate.Resources>
    					<Storyboard x:Key="Press">
    						<DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
    							Storyboard.TargetName="PressOverlay"
    							Storyboard.TargetProperty="(UIElement.Opacity)">
    							<SplineDoubleKeyFrame KeyTime="00:00:00.1000000"
    								Value="1" />
    						</DoubleAnimationUsingKeyFrames>
    					</Storyboard>
    					<Storyboard x:Key="Release">
    						<DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
    							Storyboard.TargetName="PressOverlay"
    							Storyboard.TargetProperty="(UIElement.Opacity)">
    							<SplineDoubleKeyFrame KeyTime="00:00:00.2500000"
    								Value="0" />
    						</DoubleAnimationUsingKeyFrames>
    					</Storyboard>
    					<Storyboard x:Key="BlinkLikeYouMeanItStoryboard" AutoReverse="True" RepeatBehavior="Forever">
    						<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="Grid">
    							<EasingDoubleKeyFrame KeyTime="0:0:0.7" Value="1.4">
    								<EasingDoubleKeyFrame.EasingFunction>
    									<CubicEase EasingMode="EaseInOut"/>
    								</EasingDoubleKeyFrame.EasingFunction>
    							</EasingDoubleKeyFrame>
    						</DoubleAnimationUsingKeyFrames>
    						<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="Grid">
    							<EasingDoubleKeyFrame KeyTime="0:0:0.7" Value="1.4">
    								<EasingDoubleKeyFrame.EasingFunction>
    									<CubicEase EasingMode="EaseInOut"/>
    								</EasingDoubleKeyFrame.EasingFunction>
    							</EasingDoubleKeyFrame>
    						</DoubleAnimationUsingKeyFrames>
    					</Storyboard>
    				</ControlTemplate.Resources>
    				<Grid   x:Name="Grid"
    					Background="{StaticResource ControlHitAreaBrush}"
    					SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" RenderTransformOrigin="1,0">
    					<Grid.RenderTransform>
    						<TransformGroup>
    							<ScaleTransform/>
    							<SkewTransform/>
    							<RotateTransform/>
    							<TranslateTransform/>
    						</TransformGroup>
    					</Grid.RenderTransform>
    					<Border  x:Name="ButtonBody"
    						BorderThickness="{TemplateBinding BorderThickness}"
    						Background="{TemplateBinding Background}"
    						BorderBrush="{TemplateBinding BorderBrush}"
    						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
    					<Border x:Name="PressOverlay"    
    						Background="{DynamicResource {x:Static Custom:SurfaceColors.ButtonBackgroundPressedBrushKey}}"
    						Opacity="0" 
    						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
    					<ContentPresenter   x:Name="Content"
    						Margin="{TemplateBinding Padding}"
    						HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"                               					   
    						VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
    						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
    				</Grid>

    				<ControlTemplate.Triggers>
    					<Trigger Property="IsChecked"
    						Value="True">
    						<Trigger.ExitActions>
    							<StopStoryboard BeginStoryboardName="BlinkLikeYouMeanItStoryboard_BeginStoryboard"/>
    						</Trigger.ExitActions>
    						<Trigger.EnterActions>
    							<BeginStoryboard x:Name="BlinkLikeYouMeanItStoryboard_BeginStoryboard" Storyboard="{StaticResource BlinkLikeYouMeanItStoryboard}"/>
    						</Trigger.EnterActions>
    						<Setter Property="Background" TargetName="ButtonBody" Value="#4DEB2000"/>
    					</Trigger>
    					<Trigger Property="IsPressed"
    						Value="True">
    						<Trigger.EnterActions>
    							<BeginStoryboard x:Name="Press_BeginStoryboard" Storyboard="{StaticResource Press}" />
    						</Trigger.EnterActions>
    						<Trigger.ExitActions>
    							<BeginStoryboard Storyboard="{StaticResource Release}" />
    						</Trigger.ExitActions>
    						<Setter Property="Foreground"
    							Value="{DynamicResource {x:Static Custom:SurfaceColors.ButtonForegroundPressedBrushKey}}"/>
    					</Trigger>
    					<MultiTrigger>
    						<MultiTrigger.Conditions>
    							<Condition Property="IsPressed"
    								Value="True" />
    							<Condition Property="IsChecked"
    								Value="True" />
    						</MultiTrigger.Conditions>
    						<Setter Property="Background"
    							TargetName="PressOverlay"
    							Value="{DynamicResource {x:Static Custom:SurfaceColors.ToggleButtonBackgroundCheckedPressedBrushKey}}"/>
    					</MultiTrigger>
    					<MultiTrigger>
    						<MultiTrigger.Conditions>
    							<Condition Property="IsEnabled"
    								Value="False" />
    							<Condition Property="IsChecked"
    								Value="True" />
    						</MultiTrigger.Conditions>
    						<Setter Property="Background"
    							Value="{DynamicResource {x:Static Custom:SurfaceColors.ToggleButtonBackgroundCheckedDisabledBrushKey}}"
    							TargetName="ButtonBody"/>
    						<Setter Property="Opacity"
    							Value="0.6"
    							TargetName="Content"/>
    					</MultiTrigger>
    					<MultiTrigger>
    						<MultiTrigger.Conditions>
    							<Condition  Property="IsEnabled"
    								Value="False" />
    							<Condition Property="IsChecked"
    								Value="False" />
    						</MultiTrigger.Conditions>
    						<Setter Property="Foreground"
    							Value="{DynamicResource {x:Static Custom:SurfaceColors.ButtonForegroundDisabledBrushKey}}"/>
    						<Setter Property="Background"
    							Value="{DynamicResource {x:Static Custom:SurfaceColors.ButtonBackgroundDisabledBrushKey}}"
    							TargetName="ButtonBody"/>
    						<Setter Property="Opacity"
    							Value="0.33"
    							TargetName="Content"/>
    					</MultiTrigger>
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    	<Setter Property="BorderBrush">
    		<Setter.Value>
                <SolidColorBrush Color="{DynamicResource DefaultBrushColor}"/>
    		</Setter.Value>
    	</Setter>
    </Style>
</ResourceDictionary>